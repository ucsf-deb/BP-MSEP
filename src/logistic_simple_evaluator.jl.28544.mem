        - """
        - Evaluates data as produced by `maker()` with a simple mixed logistic model
        - We only use `Y`, a binary indicator, since the model has no observed covariates.
        - """
        - mutable struct  LogisticSimpleEvaluator{TParam} <: Evaluator
        -     "parameter for weight function"
        -     # const requires julia 1.8+
        -     const λ::TParam
        - 
        -     "parameters for the regression part of the model"
        -     const k::TParam
        - 
        -     "parameters for random effect distn"
        -     const σ::TParam
        - 
        -     "order for the numerical integration"
        -     const integration_order::Integer
        - 
        -     ## The constructor is responsible for the following
        -     "f(z, workarea)= w(z)*conditional density*normal density
        -     or, if withZ is true, z*w(z)*...."
        -     const f
        - 
        -     "Short name of primary estimand, e.g., zSQ"
        -     const targetName::String
        - 
        -     "used to integrate f(z) over the real line"
        -     const integrator
        - 
        -     "short name of numerical integration method"
        -     const integratorName::String
        - 
        -     "fuller description integration method"
        -     const integratorDescription::String
        - end
        - 
        - "Default to zSQ evaluator"
        - function LogisticSimpleEvaluator(λ, k, σ, integration_order=7)
        -     LogisticSimpleEvaluator(λ, k, σ, integration_order, zSQdensity, "zSQ", 
        -     AgnosticAGK(integration_order), "AGK", "Adaptive Gauss-Kronrod")
        - end
        - 
        - "enumerate desired calculation for WorkArea"
        - @enum Objective justZ justW WZ just1
        - 
        - """
        - Working data for a particular thread.
        - This includes all the information needed to evaluate the function we are integrating,
        -     since we aren't allowed to pass arguments down other than z.
        - """
        - mutable struct  WorkArea{TEvaluator}
   220256     """
        -     This is the entire data frame.  An individual run will only work with
        -     a few rows.
        - 
        -     This only needs to be set once at the start of the thread
        -     """
        -     const dat::DataFrame
        -     "Y is just the type-stable version of Y in dat"
        -     const Y::BitVector
        - 
        -     """
        -     An evaluator, such as that above.
        -     Also only set once and shared between threads
        -     """
        -     const evaluator::TEvaluator
        - 
        -     "working space for integrator
        -     This is created at the start but written to constantly."
        -     segs
        -     
        -     # The following are set on each evaluation
        -     "dirty trick to determine whether to integrate over 1, z, w, or wz"
        -     objective::Objective
        - 
        -     "first row index of cluster of current interest"
        -     i_start::UInt
        - 
        -     "last row index of cluster, inclusive"
        -     i_end::UInt
        - 
        -     "index of cluster for output"
        -     i_cluster::UInt
        - 
        - end
        - 
        - "convenient constructor"
        - function WorkArea(dat::DataFrame, ev::TEvaluator) where {TEvaluator}
        -     zip::UInt = 0
   567760     WorkArea{TEvaluator}(dat, dat.Y, ev, work(ev), WZ, zip, zip, zip)
        - end
        - 
        - "evaluate (z, w or wz) * density  for a single cluster"
        - function zSQdensity(z::Float64, wa::WorkArea)
 56485776     ev = wa.evaluator
        -     dat::DataFrame = wa.dat
 79992144     objective::Objective = wa.objective
        - 
        -     #= 
        -     The initial d is generally the product of weight (defined using zSQ with parameter λ) and
        -     the standard normal density. By combining them we can avoid many
        -     overflow problems.
        - 
        -     The exception is for objective == justZ.  In this case, there is no weighting.
        - 
        -     The constant multiplier invsqrt2π for the normal density is unnecessary to the final
        -     result of the larger computation.  Since we are omitting the Bayes denominator
        -     anyway, I've left it out.
        - 
        -     z by definition is standard normal, and so k and σ only apply to its
        -     use for the conditional distribution, cd, not its distribution in
        -     the first term.
        - 
        -     =#
428412672     if objective == justZ || objective == just1
        -         # if this doesn't work may want Gauss-Hermite quadrature
160522816         d = exp(-0.5 * z^2)
        -     else
433700448         d = exp(-0.5 * (1.0 - 2.0 * ev.λ) * z^2)
        -     end
2611444368     for i in wa.i_start:wa.i_end
6068549152         Y = wa.Y[i]
        - 
        -         # conditional Y=1 | z
        -         # next line gets most of the CPU time
4161661840         cd = logistic(z*ev.σ + ev.k)
596885392         if Y
145108960             d *= cd
        -         else
828261680             d *= (1.0-cd)
        -         end
        - 
3410773248     end
466239648     if objective == justZ || objective == WZ
 45197232         d *= z
        -     end
164049776     return d
        - end
        - 
        - """
        - returns a function fDensity(z, wa) where weight is given by
        - the function wt(z, λ) which will be evaluated
        - inside the exponential.
        - """
        - function wDensity(wt )
        -     return function(z::Float64, wa::WorkArea)
        -         ev::LogisticSimpleEvaluator = wa.evaluator
        -         dat::DataFrame = wa.dat
        -         objective::Objective = wa.objective
        - 
        -         if objective == justZ || objective == just1
        -             # if this doesn't work may want Gauss-Hermite quadrature
        -             d = exp(-0.5 * z^2)
        -         else
        -             d = exp(-0.5 * z^2 + wt(z, ev.λ))
        -         end
        -         for i in wa.i_start:wa.i_end
        -             Y = wa.Y[i]
        - 
        -             # conditional Y=1 | z
        -             # next line gets most of the CPU time
        -             cd = logistic(z*ev.σ + ev.k)
        -             if Y
        -                 d *= cd
        -             else
        -                 d *= (1.0-cd)
        -             end
        - 
        -         end
        -         if objective == justZ || objective == WZ
        -             d *= z
        -         end
        -         return d
        -     end
        - end
        - 
        - "Evaluate zhat for cluster defined in work area wa"
        - #TODO: check accuracy of integration
        - function zhat(ev::LogisticSimpleEvaluator, wa::WorkArea)
572595408     f(z) = ev.f(z, wa)
   150432     wa.objective = WZ
  2228384     num = ev.integrator(f, segbuf=wa.segs)
    64560     wa.objective = justW
  1494448     den = ev.integrator(f, segbuf=wa.segs)
   523552     return num/den
        - end
        - 
        - "Evaluate zsimp, a potential analogue of zBP"
        - function zsimp(ev::LogisticSimpleEvaluator, wa::WorkArea)
481430544     f(z) = ev.f(z, wa)
    67600     wa.objective = justZ
  1468976     zsimp = ev.integrator(f, segbuf=wa.segs)
    61088     wa.objective = just1
  1455552     den1 = ev.integrator(f, segbuf=wa.segs)
   514352     return zsimp/den1
        - end
        - 
        - """
        - Defines a computational worker thread
        - 
        - It receives commands through channel.  Those commands are
        - (i0, i1, iCluster) meaning evaluate the ratio of 
        - E(wz)/E(w) for cluster iCluster, which has rows i0:i1.
        - Write the results back into ml with appropriate locking.
        - 
        - i0<0 means there is no more work and the thread should exit.
        - 
        - ml holds the input data with individual rows and the output
        - data with a row for each cluster
        - """
        - function worker(command::Channel, ml::MultiLevel, ev::LogisticSimpleEvaluator)
   279248     wa = WorkArea(ml.individuals, ev)
        -     while true
  6725216         i0, i1, iCluster = take!(command)
   329984         if i0 < 0
        -             # maybe I should make a call to kill thread
     1600             return
        -         end
   304624         wa.i_start = i0
   319184         wa.i_end = i1
   338448         wa.i_cluster = iCluster
        -         # do long-running calculations outside the lock
   234288         zh = zhat(ev, wa)
   148640         zs = zsimp(ev, wa)
        -         # DataFrame is thread-safe for reading, but not writing
  1560448         lock(ml.cluster_lock) do
   643344             ml.clusters.zhat[iCluster] = zh
   915408             ml.clusters.zsimp[iCluster] = zs
        -         end
        -     end
        - end
        - 
        - "return a working space of suitable type for the integrator"
        - function work(ev::LogisticSimpleEvaluator)
   384832     return work(ev.integrator)
        - end
        - 
        - function work(integrator::AgnosticAGK)
        -     # size = order looks as if it's the default
        -     # if so, this is more than enough.
   566720     return alloc_segbuf(size=40)
        - end
